[
    {
        "id": "5e4f8b75c1422948",
        "type": "tab",
        "label": "Goodtech Custom Board Tester",
        "disabled": false,
        "info": ""
    },
    {
        "id": "96313810361e9a35",
        "type": "inject",
        "z": "5e4f8b75c1422948",
        "name": "Relay 1 On",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 720,
        "y": 200,
        "wires": [
            [
                "02ee744278e29cb5"
            ]
        ]
    },
    {
        "id": "02ee744278e29cb5",
        "type": "function",
        "z": "5e4f8b75c1422948",
        "name": "",
        "func": "msg.payload = {};\nmsg.payload.address = flow.get(\"destination\");\n\nfunction toUTF8Array(str) {\n    let utf8 = [];\n    for (let i = 0; i < str.length; i++) {\n        let charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n            utf8.push(0xc0 | (charcode >> 6),\n                      0x80 | (charcode & 0x3f));\n        }\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\n            utf8.push(0xe0 | (charcode >> 12),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n        // surrogate pair\n        else {\n            i++;\n            // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n            charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n                      | (str.charCodeAt(i) & 0x3ff));\n            utf8.push(0xf0 | (charcode >>18),\n                      0x80 | ((charcode>>12) & 0x3f),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n    }\n    return utf8;\n}\n\ncommand = {};\ncommand[\"relay_1\"] = 1;\nmsg.payload.data = toUTF8Array(JSON.stringify(command));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 200,
        "wires": [
            [
                "4edb0901dd0cab4e",
                "82d4be37138a959d"
            ]
        ]
    },
    {
        "id": "8339b70c463937ab",
        "type": "inject",
        "z": "5e4f8b75c1422948",
        "name": "Relay 1 Off",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 720,
        "y": 280,
        "wires": [
            [
                "b73f43d849a15c79"
            ]
        ]
    },
    {
        "id": "b73f43d849a15c79",
        "type": "function",
        "z": "5e4f8b75c1422948",
        "name": "",
        "func": "msg.payload = {};\nmsg.payload.address = flow.get(\"destination\");\n\nfunction toUTF8Array(str) {\n    let utf8 = [];\n    for (let i = 0; i < str.length; i++) {\n        let charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n            utf8.push(0xc0 | (charcode >> 6),\n                      0x80 | (charcode & 0x3f));\n        }\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\n            utf8.push(0xe0 | (charcode >> 12),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n        // surrogate pair\n        else {\n            i++;\n            // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n            charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n                      | (str.charCodeAt(i) & 0x3ff));\n            utf8.push(0xf0 | (charcode >>18),\n                      0x80 | ((charcode>>12) & 0x3f),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n    }\n    return utf8;\n}\n\ncommand = {};\ncommand[\"relay_1\"] = 0;\nmsg.payload.data = toUTF8Array(JSON.stringify(command));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 280,
        "wires": [
            [
                "82d4be37138a959d"
            ]
        ]
    },
    {
        "id": "a2625beeac536a57",
        "type": "inject",
        "z": "5e4f8b75c1422948",
        "name": "Relay 2 On",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 720,
        "y": 360,
        "wires": [
            [
                "5664a19e0c9de0a9"
            ]
        ]
    },
    {
        "id": "5664a19e0c9de0a9",
        "type": "function",
        "z": "5e4f8b75c1422948",
        "name": "",
        "func": "msg.payload = {};\nmsg.payload.address = flow.get(\"destination\");\n\nfunction toUTF8Array(str) {\n    let utf8 = [];\n    for (let i = 0; i < str.length; i++) {\n        let charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n            utf8.push(0xc0 | (charcode >> 6),\n                      0x80 | (charcode & 0x3f));\n        }\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\n            utf8.push(0xe0 | (charcode >> 12),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n        // surrogate pair\n        else {\n            i++;\n            // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n            charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n                      | (str.charCodeAt(i) & 0x3ff));\n            utf8.push(0xf0 | (charcode >>18),\n                      0x80 | ((charcode>>12) & 0x3f),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n    }\n    return utf8;\n}\n\ncommand = {};\ncommand[\"relay_2\"] = 1;\nmsg.payload.data = toUTF8Array(JSON.stringify(command));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 360,
        "wires": [
            [
                "82d4be37138a959d"
            ]
        ]
    },
    {
        "id": "ebc496a24f2b106f",
        "type": "inject",
        "z": "5e4f8b75c1422948",
        "name": "Relay 2 Off",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 720,
        "y": 440,
        "wires": [
            [
                "3506864e273b1af9"
            ]
        ]
    },
    {
        "id": "3506864e273b1af9",
        "type": "function",
        "z": "5e4f8b75c1422948",
        "name": "",
        "func": "msg.payload = {};\nmsg.payload.address = flow.get(\"destination\");\n\nfunction toUTF8Array(str) {\n    let utf8 = [];\n    for (let i = 0; i < str.length; i++) {\n        let charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n            utf8.push(0xc0 | (charcode >> 6),\n                      0x80 | (charcode & 0x3f));\n        }\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\n            utf8.push(0xe0 | (charcode >> 12),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n        // surrogate pair\n        else {\n            i++;\n            // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n            charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n                      | (str.charCodeAt(i) & 0x3ff));\n            utf8.push(0xf0 | (charcode >>18),\n                      0x80 | ((charcode>>12) & 0x3f),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n    }\n    return utf8;\n}\n\ncommand = {};\ncommand[\"relay_2\"] = 0;\nmsg.payload.data = toUTF8Array(JSON.stringify(command));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 440,
        "wires": [
            [
                "82d4be37138a959d"
            ]
        ]
    },
    {
        "id": "dc67dda07941bfd3",
        "type": "ui_button",
        "z": "5e4f8b75c1422948",
        "name": "",
        "group": "6694084edc036a71",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Relay 1 On",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 710,
        "y": 160,
        "wires": [
            [
                "02ee744278e29cb5"
            ]
        ]
    },
    {
        "id": "0271ee67a3900e32",
        "type": "ui_button",
        "z": "5e4f8b75c1422948",
        "name": "",
        "group": "6694084edc036a71",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Relay 1 Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 710,
        "y": 240,
        "wires": [
            [
                "b73f43d849a15c79"
            ]
        ]
    },
    {
        "id": "cd7e408adcc918e3",
        "type": "ui_button",
        "z": "5e4f8b75c1422948",
        "name": "",
        "group": "6694084edc036a71",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Relay 2 On",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 710,
        "y": 320,
        "wires": [
            [
                "5664a19e0c9de0a9"
            ]
        ]
    },
    {
        "id": "294a9e0f8278a102",
        "type": "ui_button",
        "z": "5e4f8b75c1422948",
        "name": "",
        "group": "6694084edc036a71",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Relay 2 Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 710,
        "y": 400,
        "wires": [
            [
                "3506864e273b1af9"
            ]
        ]
    },
    {
        "id": "2836d96f7ccad41b",
        "type": "ui_slider",
        "z": "5e4f8b75c1422948",
        "name": "",
        "label": "DAC 1",
        "tooltip": "",
        "group": "6694084edc036a71",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "4095",
        "step": 1,
        "className": "",
        "x": 730,
        "y": 920,
        "wires": [
            [
                "e0caa1f21fa06578"
            ]
        ]
    },
    {
        "id": "1a875c263a749a5f",
        "type": "ui_slider",
        "z": "5e4f8b75c1422948",
        "name": "",
        "label": "DAC 2",
        "tooltip": "",
        "group": "6694084edc036a71",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "4095",
        "step": 1,
        "className": "",
        "x": 730,
        "y": 960,
        "wires": [
            [
                "866548b37a566e33"
            ]
        ]
    },
    {
        "id": "e0caa1f21fa06578",
        "type": "function",
        "z": "5e4f8b75c1422948",
        "name": "",
        "func": "set_val = msg.payload;\nmsg.payload = {};\nmsg.payload.address = flow.get(\"destination\");\n\nfunction toUTF8Array(str) {\n    let utf8 = [];\n    for (let i = 0; i < str.length; i++) {\n        let charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n            utf8.push(0xc0 | (charcode >> 6),\n                      0x80 | (charcode & 0x3f));\n        }\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\n            utf8.push(0xe0 | (charcode >> 12),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n        // surrogate pair\n        else {\n            i++;\n            // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n            charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n                      | (str.charCodeAt(i) & 0x3ff));\n            utf8.push(0xf0 | (charcode >>18),\n                      0x80 | ((charcode>>12) & 0x3f),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n    }\n    return utf8;\n}\n\ncommand = {};\ncommand[\"dac_1\"] = set_val;\nmsg.payload.data = toUTF8Array(JSON.stringify(command));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 920,
        "wires": [
            [
                "82d4be37138a959d"
            ]
        ]
    },
    {
        "id": "866548b37a566e33",
        "type": "function",
        "z": "5e4f8b75c1422948",
        "name": "",
        "func": "set_val = msg.payload;\nmsg.payload = {};\nmsg.payload.address = flow.get(\"destination\");\n\nfunction toUTF8Array(str) {\n    let utf8 = [];\n    for (let i = 0; i < str.length; i++) {\n        let charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n            utf8.push(0xc0 | (charcode >> 6),\n                      0x80 | (charcode & 0x3f));\n        }\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\n            utf8.push(0xe0 | (charcode >> 12),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n        // surrogate pair\n        else {\n            i++;\n            // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n            charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n                      | (str.charCodeAt(i) & 0x3ff));\n            utf8.push(0xf0 | (charcode >>18),\n                      0x80 | ((charcode>>12) & 0x3f),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n    }\n    return utf8;\n}\n\ncommand = {};\ncommand[\"dac_2\"] = set_val;\nmsg.payload.data = toUTF8Array(JSON.stringify(command));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 960,
        "wires": [
            [
                "82d4be37138a959d"
            ]
        ]
    },
    {
        "id": "e9e6b35ad8668982",
        "type": "function",
        "z": "5e4f8b75c1422948",
        "name": "",
        "func": "command = msg.payload.command;\n\nfunction toUTF8Array(str) {\n    let utf8 = [];\n    for (let i = 0; i < str.length; i++) {\n        let charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n            utf8.push(0xc0 | (charcode >> 6),\n                      0x80 | (charcode & 0x3f));\n        }\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\n            utf8.push(0xe0 | (charcode >> 12),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n        // surrogate pair\n        else {\n            i++;\n            // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n            charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n                      | (str.charCodeAt(i) & 0x3ff));\n            utf8.push(0xf0 | (charcode >>18),\n                      0x80 | ((charcode>>12) & 0x3f),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n    }\n    return utf8;\n}\nmsg.payload.data = toUTF8Array(JSON.stringify(command));\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "414b92a85ffb8c84",
        "type": "inject",
        "z": "5e4f8b75c1422948",
        "name": "All Low",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"address\":\"00:13:a2:00:41:d7:37:a5\",\"command\":{\"relay_1\":0,\"relay_2\":0,\"dac_1\":0,\"dac_2\":0}}",
        "payloadType": "json",
        "x": 330,
        "y": 220,
        "wires": [
            [
                "e9e6b35ad8668982"
            ]
        ]
    },
    {
        "id": "e4df55c23f61399b",
        "type": "debug",
        "z": "5e4f8b75c1422948",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 320,
        "wires": []
    },
    {
        "id": "ac931041da97ad73",
        "type": "inject",
        "z": "5e4f8b75c1422948",
        "name": "Get Status",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"address\":\"00:13:a2:00:41:d7:37:a5\",\"command\":{\"operation\":\"get_status\"}}",
        "payloadType": "json",
        "x": 320,
        "y": 180,
        "wires": [
            [
                "e9e6b35ad8668982"
            ]
        ]
    },
    {
        "id": "a81f6da2076c1f15",
        "type": "function",
        "z": "5e4f8b75c1422948",
        "name": "",
        "func": "s = String.fromCharCode.apply(null, msg.payload.data);\ns.replace(/\\\\n/g, \"\\\\n\")  \n               .replace(/\\\\'/g, \"\\\\'\")\n               .replace(/\\\\\"/g, '\\\\\"')\n               .replace(/\\\\&/g, \"\\\\&\")\n               .replace(/\\\\r/g, \"\\\\r\")\n               .replace(/\\\\t/g, \"\\\\t\")\n               .replace(/\\\\b/g, \"\\\\b\")\n               .replace(/\\\\f/g, \"\\\\f\");\ns = s.replace(/[\\u0000-\\u0019]+/g,\"\");\n\nmsg.payload.data = JSON.parse(s);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 320,
        "wires": [
            [
                "e4df55c23f61399b"
            ]
        ]
    },
    {
        "id": "b4298668fd49d2f4",
        "type": "inject",
        "z": "5e4f8b75c1422948",
        "name": "All High",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"address\":\"00:13:a2:00:41:d7:37:a5\",\"command\":{\"relay_1\":1,\"relay_2\":1,\"dac_1\":4095,\"dac_2\":4095}}",
        "payloadType": "json",
        "x": 330,
        "y": 260,
        "wires": [
            [
                "e9e6b35ad8668982"
            ]
        ]
    },
    {
        "id": "250deb2f36d3182a",
        "type": "ui_text_input",
        "z": "5e4f8b75c1422948",
        "name": "Destination",
        "label": "Destination Address",
        "tooltip": "enter the address of the desired device",
        "group": "6694084edc036a71",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "topicType": "msg",
        "x": 720,
        "y": 80,
        "wires": [
            [
                "e8cb358d88ec9b40"
            ]
        ]
    },
    {
        "id": "e8cb358d88ec9b40",
        "type": "change",
        "z": "5e4f8b75c1422948",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "destination",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "387fec418aa28c44",
        "type": "mqtt in",
        "z": "5e4f8b75c1422948",
        "name": "",
        "topic": "Article_Channel/#",
        "qos": "0",
        "datatype": "json",
        "broker": "",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 420,
        "wires": [
            [
                "806838e34d4a8dc8"
            ]
        ]
    },
    {
        "id": "806838e34d4a8dc8",
        "type": "debug",
        "z": "5e4f8b75c1422948",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 420,
        "wires": []
    },
    {
        "id": "4edb0901dd0cab4e",
        "type": "debug",
        "z": "5e4f8b75c1422948",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 200,
        "wires": []
    },
    {
        "id": "82d4be37138a959d",
        "type": "ncd-gateway-node",
        "z": "5e4f8b75c1422948",
        "name": "",
        "connection": "f3d2780c.9b91b",
        "unknown_devices": 0,
        "outputs": 1,
        "x": 1070,
        "y": 320,
        "wires": [
            [
                "a81f6da2076c1f15"
            ]
        ]
    },
    {
        "id": "b4472bcdab40502f",
        "type": "inject",
        "z": "5e4f8b75c1422948",
        "name": "Relay 3 On",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 720,
        "y": 520,
        "wires": [
            [
                "f6711c5de182c131"
            ]
        ]
    },
    {
        "id": "f6711c5de182c131",
        "type": "function",
        "z": "5e4f8b75c1422948",
        "name": "",
        "func": "msg.payload = {};\nmsg.payload.address = flow.get(\"destination\");\n\nfunction toUTF8Array(str) {\n    let utf8 = [];\n    for (let i = 0; i < str.length; i++) {\n        let charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n            utf8.push(0xc0 | (charcode >> 6),\n                      0x80 | (charcode & 0x3f));\n        }\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\n            utf8.push(0xe0 | (charcode >> 12),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n        // surrogate pair\n        else {\n            i++;\n            // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n            charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n                      | (str.charCodeAt(i) & 0x3ff));\n            utf8.push(0xf0 | (charcode >>18),\n                      0x80 | ((charcode>>12) & 0x3f),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n    }\n    return utf8;\n}\n\ncommand = {};\ncommand[\"relay_3\"] = 1;\nmsg.payload.data = toUTF8Array(JSON.stringify(command));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "c0fd1161b4fdc198",
        "type": "inject",
        "z": "5e4f8b75c1422948",
        "name": "Relay 3 Off",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 720,
        "y": 600,
        "wires": [
            [
                "9c21fb7df3960539"
            ]
        ]
    },
    {
        "id": "9c21fb7df3960539",
        "type": "function",
        "z": "5e4f8b75c1422948",
        "name": "",
        "func": "msg.payload = {};\nmsg.payload.address = flow.get(\"destination\");\n\nfunction toUTF8Array(str) {\n    let utf8 = [];\n    for (let i = 0; i < str.length; i++) {\n        let charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n            utf8.push(0xc0 | (charcode >> 6),\n                      0x80 | (charcode & 0x3f));\n        }\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\n            utf8.push(0xe0 | (charcode >> 12),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n        // surrogate pair\n        else {\n            i++;\n            // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n            charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n                      | (str.charCodeAt(i) & 0x3ff));\n            utf8.push(0xf0 | (charcode >>18),\n                      0x80 | ((charcode>>12) & 0x3f),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n    }\n    return utf8;\n}\n\ncommand = {};\ncommand[\"relay_3\"] = 0;\nmsg.payload.data = toUTF8Array(JSON.stringify(command));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "8fd4d4a4fa075596",
        "type": "ui_button",
        "z": "5e4f8b75c1422948",
        "name": "",
        "group": "6694084edc036a71",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Relay 3 On",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 710,
        "y": 480,
        "wires": [
            [
                "f6711c5de182c131"
            ]
        ]
    },
    {
        "id": "9aad76a7bd36d4d3",
        "type": "ui_button",
        "z": "5e4f8b75c1422948",
        "name": "",
        "group": "6694084edc036a71",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Relay 3 Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 710,
        "y": 560,
        "wires": [
            [
                "9c21fb7df3960539"
            ]
        ]
    },
    {
        "id": "89e5f296c0785ab2",
        "type": "inject",
        "z": "5e4f8b75c1422948",
        "name": "Relay 4 On",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 720,
        "y": 680,
        "wires": [
            [
                "d0a2252a928ccca5"
            ]
        ]
    },
    {
        "id": "d0a2252a928ccca5",
        "type": "function",
        "z": "5e4f8b75c1422948",
        "name": "",
        "func": "msg.payload = {};\nmsg.payload.address = flow.get(\"destination\");\n\nfunction toUTF8Array(str) {\n    let utf8 = [];\n    for (let i = 0; i < str.length; i++) {\n        let charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n            utf8.push(0xc0 | (charcode >> 6),\n                      0x80 | (charcode & 0x3f));\n        }\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\n            utf8.push(0xe0 | (charcode >> 12),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n        // surrogate pair\n        else {\n            i++;\n            // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n            charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n                      | (str.charCodeAt(i) & 0x3ff));\n            utf8.push(0xf0 | (charcode >>18),\n                      0x80 | ((charcode>>12) & 0x3f),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n    }\n    return utf8;\n}\n\ncommand = {};\ncommand[\"relay_3\"] = 1;\nmsg.payload.data = toUTF8Array(JSON.stringify(command));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "332b283520096c19",
        "type": "inject",
        "z": "5e4f8b75c1422948",
        "name": "Relay 4 Off",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 720,
        "y": 760,
        "wires": [
            [
                "221852adedb7e308"
            ]
        ]
    },
    {
        "id": "221852adedb7e308",
        "type": "function",
        "z": "5e4f8b75c1422948",
        "name": "",
        "func": "msg.payload = {};\nmsg.payload.address = flow.get(\"destination\");\n\nfunction toUTF8Array(str) {\n    let utf8 = [];\n    for (let i = 0; i < str.length; i++) {\n        let charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n            utf8.push(0xc0 | (charcode >> 6),\n                      0x80 | (charcode & 0x3f));\n        }\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\n            utf8.push(0xe0 | (charcode >> 12),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n        // surrogate pair\n        else {\n            i++;\n            // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n            charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n                      | (str.charCodeAt(i) & 0x3ff));\n            utf8.push(0xf0 | (charcode >>18),\n                      0x80 | ((charcode>>12) & 0x3f),\n                      0x80 | ((charcode>>6) & 0x3f),\n                      0x80 | (charcode & 0x3f));\n        }\n    }\n    return utf8;\n}\n\ncommand = {};\ncommand[\"relay_3\"] = 0;\nmsg.payload.data = toUTF8Array(JSON.stringify(command));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "514c59a54891a0d1",
        "type": "ui_button",
        "z": "5e4f8b75c1422948",
        "name": "",
        "group": "6694084edc036a71",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Relay 4 On",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 710,
        "y": 640,
        "wires": [
            [
                "d0a2252a928ccca5"
            ]
        ]
    },
    {
        "id": "ce7555c9e5810303",
        "type": "ui_button",
        "z": "5e4f8b75c1422948",
        "name": "",
        "group": "6694084edc036a71",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Relay 4 Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 710,
        "y": 720,
        "wires": [
            [
                "221852adedb7e308"
            ]
        ]
    },
    {
        "id": "6694084edc036a71",
        "type": "ui_group",
        "name": "Default",
        "tab": "856a49f194838176",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f3d2780c.9b91b",
        "type": "ncd-gateway-config",
        "name": "Zigmo",
        "comm_type": "serial",
        "ip_address": "",
        "tcp_port": "2101",
        "port": "/dev/tty.usbserial-AC3VPU1B",
        "baudRate": "115200",
        "pan_id": "7fff",
        "rssi": false
    },
    {
        "id": "856a49f194838176",
        "type": "ui_tab",
        "name": "Goodtech",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    }
]
